(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{304:function(t,s,a){"use strict";a.r(s);var n=a(32),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"js-基础-数据类型与数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-基础-数据类型与数据结构"}},[t._v("#")]),t._v(" JS 基础--数据类型与数据结构")]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#数据类型概念"}},[t._v("数据类型概念")]),a("ul",[a("li",[a("a",{attrs:{href:"#js-有哪些原始数据类型，有哪些引用数据类型"}},[t._v("JS 有哪些原始数据类型，有哪些引用数据类型")])]),a("li",[a("a",{attrs:{href:"#下面的这段代码执行的结果是什么"}},[t._v("下面的这段代码执行的结果是什么")])]),a("li",[a("a",{attrs:{href:"#_1-tostring-为什么可以调用"}},[t._v("'1'.toString()为什么可以调用")])]),a("li",[a("a",{attrs:{href:"#_0-1-0-2-为什么不等于-0-3，1-2-为什么等于-3"}},[t._v("0.1 + 0.2 为什么不等于 0.3，1 + 2 为什么等于 3")])]),a("li",[a("a",{attrs:{href:"#bigint"}},[t._v("BigInt")])])])]),a("li",[a("a",{attrs:{href:"#数据类型检测"}},[t._v("数据类型检测")]),a("ul",[a("li",[a("a",{attrs:{href:"#typeof"}},[t._v("typeof")])]),a("li",[a("a",{attrs:{href:"#instanceof"}},[t._v("instanceof")])])])]),a("li",[a("a",{attrs:{href:"#数据类型转换"}},[t._v("数据类型转换")]),a("ul",[a("li",[a("a",{attrs:{href:"#类型转换"}},[t._v("类型转换")])]),a("li",[a("a",{attrs:{href:"#和-的区别"}},[t._v("==和===的区别")])]),a("li",[a("a",{attrs:{href:"#object-is"}},[t._v("Object.is()")])]),a("li",[a("a",{attrs:{href:"#对象转换成原始类型"}},[t._v("对象转换成原始类型")])]),a("li",[a("a",{attrs:{href:"#结果"}},[t._v("[] == ![]结果")])]),a("li",[a("a",{attrs:{href:"#四则运算"}},[t._v("四则运算")])])])]),a("li",[a("a",{attrs:{href:"#数据结构"}},[t._v("数据结构")]),a("ul",[a("li",[a("a",{attrs:{href:"#set"}},[t._v("Set")])]),a("li",[a("a",{attrs:{href:"#weakset"}},[t._v("WeakSet")])]),a("li",[a("a",{attrs:{href:"#map"}},[t._v("Map")])]),a("li",[a("a",{attrs:{href:"#weakmap"}},[t._v("WeakMap")])]),a("li",[a("a",{attrs:{href:"#weakmap-方法"}},[t._v("WeakMap 方法")])]),a("li",[a("a",{attrs:{href:"#json"}},[t._v("JSON")])])])]),a("li",[a("a",{attrs:{href:"#参考出处"}},[t._v("参考出处")])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"数据类型概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型概念"}},[t._v("#")]),t._v(" 数据类型概念")]),t._v(" "),a("h3",{attrs:{id:"js-有哪些原始数据类型，有哪些引用数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-有哪些原始数据类型，有哪些引用数据类型"}},[t._v("#")]),t._v(" JS 有哪些原始数据类型，有哪些引用数据类型")]),t._v(" "),a("p",[t._v("原生 JS 有 7 种原始数据类型：")]),t._v(" "),a("ul",[a("li",[t._v("string")]),t._v(" "),a("li",[t._v("number")]),t._v(" "),a("li",[t._v("boolean")]),t._v(" "),a("li",[t._v("null")]),t._v(" "),a("li",[t._v("undefined")]),t._v(" "),a("li",[t._v("symbol")]),t._v(" "),a("li",[t._v("bigint")])]),t._v(" "),a("p",[t._v("除去以上 7 种原始数据类型，其他的都是引用数据类型，也就是对象，包括普通对象 Object，数组对象 Array，正则对象 RegExp，日期对象 Date，数学函数 Math，函数对象 Function。")]),t._v(" "),a("p",[t._v("原始数据类型存储的是值，对象存储的是地址，指针。")]),t._v(" "),a("p",[t._v("string 是不可变的。"),a("br"),t._v("\nnumber 是浮点数。所以有可能出现精度问题。"),a("br"),t._v("\nnull 是基础数据类型，不是对象。所以"),a("code",[t._v("typeof")]),t._v("在此处不安全。"),a("br"),t._v("\nsymbol 使用函数 symbol()生成，用的不多，用来生成唯一不可变标识，不参与属性名的遍历。")]),t._v(" "),a("p",[t._v("对象作为参数传入，修改参数内容时，函数外该对象也会发生变化。")]),t._v(" "),a("h3",{attrs:{id:"下面的这段代码执行的结果是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#下面的这段代码执行的结果是什么"}},[t._v("#")]),t._v(" 下面的这段代码执行的结果是什么")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("26")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hzj"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fyq"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" p2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -> p1：{name: “fyq”, age: 26}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -> p2：{name: “hzj”, age: 18}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("原因")]),t._v(" "),a("p",[t._v("p1 作为参数传进 test，在函数内第一行他的 age 发生了改变。随后，person 变为另一块内存的指针，并返回，赋给 p2.")])]),t._v(" "),a("h3",{attrs:{id:"_1-tostring-为什么可以调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-tostring-为什么可以调用"}},[t._v("#")]),t._v(" "),a("code",[t._v("'1'.toString()")]),t._v("为什么可以调用")]),t._v(" "),a("p",[a("code",[t._v("'1'")]),t._v("是字符串，属于基本数据类型。基本数据类型存储的都是值，并没有函数可以调用。")]),t._v(" "),a("p",[t._v("之所以可以调用，是因为类似于"),a("strong",[t._v("基本包装类型")]),t._v("的行为("),a("strong",[t._v("基本包装类型")]),t._v("：每当读取一个基础数据类型的时候，会创建一个对应的基本包装类型的对象，从而能够调用一些方法来操作数据。JS 的基本包装类型有 String、Number、Boolean)。")]),t._v(" "),a("p",[t._v("在执行"),a("code",[t._v("'1'.toString()")]),t._v("时，执行了下列操作：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("解释一下整个过程：")]),t._v(" "),a("ul",[a("li",[t._v("创建 Object 类实例。注意为什么不是 String ？ 由于 Symbol 和 BigInt 的出现，对它们调用 new 都会报错，目前 ES6 规范也不建议用 new 来创建基本类型的包装类。")]),t._v(" "),a("li",[t._v("调用实例方法。")]),t._v(" "),a("li",[t._v("方法执行完毕后，销毁实例。")])]),t._v(" "),a("h3",{attrs:{id:"_0-1-0-2-为什么不等于-0-3，1-2-为什么等于-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-1-0-2-为什么不等于-0-3，1-2-为什么等于-3"}},[t._v("#")]),t._v(" 0.1 + 0.2 为什么不等于 0.3，1 + 2 为什么等于 3")]),t._v(" "),a("p",[t._v("0.1 和 0.2 在转换成 2 进制后会无限循环，由于精度的限制多余的位数会被截掉，产生精度损失。两者相加后再转换成 10 进制后便不等于 0.3.")]),t._v(" "),a("p",[t._v("1 和 2 在进制转换中不会损失精度，所以相加后会等于 3.")]),t._v(" "),a("p",[t._v("实际开发中，没有办法控制数字进制转化的精度，所以要谨记：")]),t._v(" "),a("p",[a("strong",[t._v("JS 中的 number 是浮点数,有可能出现精度问题。涉及到数字运算和数字传输的地方要谨慎处理。")])]),t._v(" "),a("h3",{attrs:{id:"bigint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bigint"}},[t._v("#")]),t._v(" BigInt")]),t._v(" "),a("h4",{attrs:{id:"什么是-bigint，为什么使用-bigint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是-bigint，为什么使用-bigint"}},[t._v("#")]),t._v(" 什么是 BigInt，为什么使用 BigInt")]),t._v(" "),a("blockquote",[a("p",[t._v("BigInt 是一种新的基本数据类型，用于整数值大于 number 数据类型支持的范围的情况下。")])]),t._v(" "),a("p",[t._v("JS 中的 number 是双精度 64 位浮点数。他无法表示特别大的整数，会将其四舍五入,同时也会存在安全问题。例如：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9999999999999999999")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// =>10000000000000000000")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9007199254740992")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9007199254740993")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h4",{attrs:{id:"使用-bigint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-bigint"}},[t._v("#")]),t._v(" 使用 BigInt")]),t._v(" "),a("p",[t._v("创建 BigInt 在数字末尾追加 n,或者使用 BigInt()构造函数：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9007199254740995n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BigInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"9007199254740995"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => bigint")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => bigint")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("注意："),a("strong",[t._v("不允许 BigInt 和 Number 之间混合操作。")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => TypeError")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h4",{attrs:{id:"浏览器兼容性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器兼容性"}},[t._v("#")]),t._v(" 浏览器兼容性")]),t._v(" "),a("p",[t._v("目前没有全部兼容，只有 chrome67、firefox、Opera 等支持。")]),t._v(" "),a("h2",{attrs:{id:"数据类型检测"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型检测"}},[t._v("#")]),t._v(" 数据类型检测")]),t._v(" "),a("h3",{attrs:{id:"typeof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typeof"}},[t._v("#")]),t._v(" "),a("code",[t._v("typeof")])]),t._v(" "),a("p",[t._v("对于除了"),a("code",[t._v("null")]),t._v("以外的原始数据类型，"),a("code",[t._v("typeof")]),t._v("可以显示出正确的类型。"),a("code",[t._v("typeof null")]),t._v("会输出"),a("code",[t._v("object")]),t._v("，这是一个历史悠久的 BUG。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'number'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'string'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'undefined'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'boolean'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'symbol'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'object'")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("但是对于引用类型，除了函数以外，"),a("code",[t._v("typeof")]),t._v("都只会输出"),a("code",[t._v("object")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'object'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'object'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'function'")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("因此不应该使用"),a("code",[t._v("typeof")]),t._v("用来判断对象数据类型，应该只用于判断原始数据类型。")]),t._v(" "),a("h3",{attrs:{id:"instanceof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instanceof"}},[t._v("#")]),t._v(" "),a("code",[t._v("instanceof")])]),t._v(" "),a("p",[a("code",[t._v("instanceof")]),t._v("一般用于判断对象类型。通常来说不能用来判断原始数据类型。"),a("code",[t._v("instanceof")]),t._v("的原理是基于原型链的查询。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),t._v("                                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v("                                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\\d"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),t._v("                              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello world'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello world'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v("                     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),t._v("                     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),t._v("                                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("h4",{attrs:{id:"instanceof判断原始数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instanceof判断原始数据类型"}},[t._v("#")]),t._v(" "),a("code",[t._v("instanceof")]),t._v("判断原始数据类型")]),t._v(" "),a("p",[t._v("如果想让"),a("code",[t._v("instanceof")]),t._v("判断原始数据类型，需要手动重写被检测类的"),a("code",[t._v("instanceof")]),t._v("方法。例如：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PrimitiveNumber")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hasInstance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"number"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("111")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PrimitiveNumber")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[a("code",[t._v("Symbol.hasInstance()")]),t._v("是一个让我们能够自定义"),a("code",[t._v("instanceof")]),t._v("行为的东西，具体的解释请见"),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"手动实现instanceof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#手动实现instanceof"}},[t._v("#")]),t._v(" 手动实现"),a("code",[t._v("instanceof")])]),t._v(" "),a("p",[t._v("核心: 原型链的向上查找。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myInstanceof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//基本数据类型直接返回false")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"object"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" left "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//getProtypeOf是Object对象自带的一个方法，能够拿到参数的原型对象")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" proto "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrototypeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//查找到尽头，还没找到")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("proto "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//找到相同的原型对象")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("proto "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    proto "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrototypeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("proto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("h2",{attrs:{id:"数据类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型转换"}},[t._v("#")]),t._v(" 数据类型转换")]),t._v(" "),a("h3",{attrs:{id:"类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型转换"}},[t._v("#")]),t._v(" 类型转换")]),t._v(" "),a("p",[t._v("JS 类型转换只有三种情况：")]),t._v(" "),a("ul",[a("li",[t._v("转 boolean")]),t._v(" "),a("li",[t._v("转数字")]),t._v(" "),a("li",[t._v("转字符串")])]),t._v(" "),a("p",[t._v("具体的转换规则如下：\n"),a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/10/20/16de9512eaf1158a?imageView2/0/w/1280/h/960/format/png/ignore-error/1",alt:"转换规则图片"}})]),t._v(" "),a("h3",{attrs:{id:"和-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#和-的区别"}},[t._v("#")]),t._v(" "),a("code",[t._v("==")]),t._v("和"),a("code",[t._v("===")]),t._v("的区别")]),t._v(" "),a("p",[a("code",[t._v("===")]),t._v("叫做严格相等，是指：左右两边不仅值要相等，类型也要相等."),a("br"),t._v("\n例如'1'===1 的结果是 false，因为一边是 string，另一边是 number。")]),t._v(" "),a("p",[a("code",[t._v("==")]),t._v("没有"),a("code",[t._v("===")]),t._v("那么严格，对于一般情况，只要两者值相等，就返回"),a("code",[t._v("true")]),t._v("。"),a("code",[t._v("==")]),t._v("的执行规则如下：")]),t._v(" "),a("ul",[a("li",[t._v("首先判断两者类型是否相同，如果相同，那么执行"),a("code",[t._v("===")])]),t._v(" "),a("li",[t._v("再判断是否是"),a("code",[t._v("null")]),t._v("和"),a("code",[t._v("undefined")]),t._v("在进行比较。如果是，返回"),a("code",[t._v("true")])]),t._v(" "),a("li",[t._v("如果是其他数据类型，要进行类型转换：\n"),a("ul",[a("li",[t._v("判断类型是否是"),a("code",[t._v("string")]),t._v("和"),a("code",[t._v("number")]),t._v("，如果是，将"),a("code",[t._v("string")]),t._v("转化成"),a("code",[t._v("number")])]),t._v(" "),a("li",[t._v("判断一方是否是"),a("code",[t._v("boolean")]),t._v("，如果是，将"),a("code",[t._v("boolean")]),t._v("转化为"),a("code",[t._v("number")])]),t._v(" "),a("li",[t._v("判断一方是否是"),a("code",[t._v("object")]),t._v("，如果是，将其转换成基本类型，一般转换成字符串或者数字，取决于另外一个对比量的类型。如果转化成字符串，转换的结果是"),a("code",[t._v("[object Object]")]),t._v("。")])])])]),t._v(" "),a("h3",{attrs:{id:"object-is"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-is"}},[t._v("#")]),t._v(" "),a("code",[t._v("Object.is()")])]),t._v(" "),a("p",[t._v("ES6 中的新方法，基本上就是"),a("code",[t._v("===")]),t._v("。和"),a("code",[t._v("===")]),t._v("不同的地方有两点，也就是+0 和-0，NaN 和 NaN：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 '==='")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 Object.is()")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("is")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("is")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h3",{attrs:{id:"对象转换成原始类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象转换成原始类型"}},[t._v("#")]),t._v(" 对象转换成原始类型")]),t._v(" "),a("p",[t._v("对象转原始类型，会调用内置的"),a("code",[t._v("[ToPrimitive]")]),t._v("函数，对于该函数而言，其逻辑如下：")]),t._v(" "),a("ol",[a("li",[t._v("如果"),a("code",[t._v("Symbol.toPrimitive()")]),t._v("方法，优先调用再返回")]),t._v(" "),a("li",[t._v("调用"),a("code",[t._v("valueOf()")]),t._v("，如果转换为原始类型，则返回")]),t._v(" "),a("li",[t._v("调用"),a("code",[t._v("toString()")]),t._v("，如果转换为原始类型，则返回")]),t._v(" "),a("li",[t._v("如果都没有返回原始类型，会报错")])]),t._v(" "),a("p",[t._v("可以手动重写"),a("code",[t._v("Symbol.toPrimitive()")]),t._v("方法，该方法在转原始类型时调用优先级最高：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"5"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toPrimitive"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出7")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("h3",{attrs:{id:"结果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结果"}},[t._v("#")]),t._v(" "),a("code",[t._v("[] == ![]")]),t._v("结果")]),t._v(" "),a("p",[a("code",[t._v("!")]),t._v("操作符的优先级高于==操作符。因此"),a("code",[t._v("![]")]),t._v("是一个"),a("code",[t._v("boolean")]),t._v("值，为"),a("code",[t._v("false")]),t._v("。"),a("br"),t._v(" "),a("code",[t._v("boolean")]),t._v("在比较中会转化成数字。因此"),a("code",[t._v("[]")]),t._v("也会转化成数字。"),a("br"),t._v(" "),a("code",[t._v("![]")]),t._v("和"),a("code",[t._v("[]")]),t._v("转化成数字都是"),a("code",[t._v("0")]),t._v("，因此结果为"),a("code",[t._v("true")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"四则运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四则运算"}},[t._v("#")]),t._v(" 四则运算")]),t._v(" "),a("p",[t._v("加法运算有两个原则：")]),t._v(" "),a("ul",[a("li",[t._v("如果一方为字符串，那么另一方也转换为字符串。")]),t._v(" "),a("li",[t._v("如果另一方不是字符串或者数字，那么将它转换成字符串或者数字。")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '11'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "41,2,3"')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("其他种类运算，会将双方转化成数字。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"4"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 12")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h2",{attrs:{id:"数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[t._v("#")]),t._v(" 数据结构")]),t._v(" "),a("p",[t._v("JS 中原生数据结构大体可以分成三类：")]),t._v(" "),a("ul",[a("li",[t._v("索引集合类，也就是数组 Array 以及其衍生 TypedArray。")]),t._v(" "),a("li",[t._v("键值对集合类，也就是 Map 以及 Set。这两种数据结构都是 ES6 新增加的。")]),t._v(" "),a("li",[t._v("结构化数据，也就是 JSON。")])]),t._v(" "),a("p",[t._v("数组类型由于过于重要，单独开篇，在此主要介绍一下后两者。")]),t._v(" "),a("p",[t._v("以下内容的主要参考资料是[阮一峰的 Set 和 Map 数据结构]部分，在此不再赘述，只列出大纲和重要结论，具体细节可以在阮老师的网站中学习。")]),t._v(" "),a("h3",{attrs:{id:"set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" Set")]),t._v(" "),a("h4",{attrs:{id:"set-基本用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-基本用法"}},[t._v("#")]),t._v(" Set 基本用法")]),t._v(" "),a("ul",[a("li",[t._v("Set 类似于数组，但是成员的值都是唯一的，没有重复的值。")]),t._v(" "),a("li",[t._v("Set 本身是一个构造函数，接受一个数组（或拥有 Iterator 接口的数据结构）作为参数来进行初始化。")]),t._v(" "),a("li",[t._v("Set 内部判断两个值是否相等使用的是一种类似于"),a("code",[t._v("===")]),t._v("的专有算法，和"),a("code",[t._v("===")]),t._v("的主要区别在于该算法认为所有的"),a("code",[t._v("NaN")]),t._v(" 都一样，一个 Set 内只会有一个"),a("code",[t._v("NaN")]),t._v("。")]),t._v(" "),a("li",[t._v("两个对象总是不相等的，哪怕他们的键值对都一样。")])]),t._v(" "),a("h4",{attrs:{id:"set-实例的属性和方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-实例的属性和方法"}},[t._v("#")]),t._v(" Set 实例的属性和方法")]),t._v(" "),a("p",[t._v("Set 实例有以下属性：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Set.prototype.constructor")]),t._v("：构造函数，默认就是 Set 函数。")]),t._v(" "),a("li",[a("code",[t._v("Set.prototype.size")]),t._v("：返回 Set 实例的成员总数。")])]),t._v(" "),a("p",[t._v("Set 实例有以下方法：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Set.prototype.add(value)")]),t._v("：添加某个值，返回 Set 结构本身。")]),t._v(" "),a("li",[a("code",[t._v("Set.prototype.delete(value)")]),t._v("：删除某个值，返回一个布尔值，表示删除是否成功。")]),t._v(" "),a("li",[a("code",[t._v("Set.prototype.has(value)")]),t._v("：返回一个布尔值，表示该值是否为 Set 的成员。")]),t._v(" "),a("li",[a("code",[t._v("Set.prototype.clear()")]),t._v("：清除所有成员，没有返回值。")])]),t._v(" "),a("p",[a("code",[t._v("Array.from()")]),t._v("方法可以将 Set 结构转为数组。可以利用这个方法进行数组去重。")]),t._v(" "),a("h4",{attrs:{id:"set-的遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set-的遍历"}},[t._v("#")]),t._v(" Set 的遍历")]),t._v(" "),a("p",[t._v("Set 的"),a("strong",[t._v("遍历顺序就是插入顺序")]),t._v("。Set 实例有四个遍历方法：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Set.prototype.keys()")]),t._v("：返回键名的遍历器")]),t._v(" "),a("li",[a("code",[t._v("Set.prototype.values()")]),t._v("：返回键值的遍历器")]),t._v(" "),a("li",[a("code",[t._v("Set.prototype.entries()")]),t._v("：返回键值对的遍历器")]),t._v(" "),a("li",[a("code",[t._v("Set.prototype.forEach()")]),t._v("：使用回调函数遍历每个成员")])]),t._v(" "),a("p",[t._v("由于 Set 结构没有键名，只有键值，因此"),a("code",[t._v("keys()")]),t._v("和"),a("code",[t._v("values()")]),t._v("的行为是一致的。")]),t._v(" "),a("p",[t._v("Set 结构默认实现了 Iterator 接口，因此更好的方法是使用"),a("code",[t._v("for ... of")]),t._v("循环进行遍历。")]),t._v(" "),a("h3",{attrs:{id:"weakset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#weakset"}},[t._v("#")]),t._v(" WeakSet")]),t._v(" "),a("h4",{attrs:{id:"weakset-概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#weakset-概念"}},[t._v("#")]),t._v(" WeakSet 概念")]),t._v(" "),a("p",[t._v("与 Set 结构类似，也是不重复的值的集合。它与 Set 的区别在于：")]),t._v(" "),a("ul",[a("li",[t._v("WeakSet 的成员都是对象。")]),t._v(" "),a("li",[t._v("WeakSet 中的对象都是"),a("strong",[t._v("弱引用")]),t._v("，即"),a("strong",[t._v("垃圾回收机制不考虑 WeakSet 对该对象的引用")]),t._v("。")])]),t._v(" "),a("p",[t._v("解释一下第二条：")]),t._v(" "),a("p",[t._v("设 WeakSet 中有一个成员对象 obj 。如果再没有其他对象引用 obj，那么垃圾回收机制就会自动回收这段内存，不考虑 WeakSet 中对 obj 的引用。")]),t._v(" "),a("p",[t._v("基于这个特点，WeakSet 中的成员可能会随时消失，是不适合引用的。WeakSet 也不能够遍历。")]),t._v(" "),a("h4",{attrs:{id:"weakset-基本用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#weakset-基本用法"}},[t._v("#")]),t._v(" WeakSet 基本用法")]),t._v(" "),a("ul",[a("li",[t._v("WeakSet 是一个构造函数，接收一个数组或类数组的结构作为参数。该参数数组的所有成员都会成为 WeakSet 实例的成员。")]),t._v(" "),a("li",[t._v("注意"),a("strong",[t._v("是参数数组的成员")]),t._v("而"),a("strong",[t._v("不是参数数组本身")]),t._v("加入 WeakSet 实例。因此参数数组必须是一个对象数组。")])]),t._v(" "),a("h4",{attrs:{id:"weakset-实例的属性和方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#weakset-实例的属性和方法"}},[t._v("#")]),t._v(" WeakSet 实例的属性和方法")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("WeakSet.prototype.add(value)")]),t._v("：向 WeakSet 实例添加一个新成员。")]),t._v(" "),a("li",[a("code",[t._v("WeakSet.prototype.delete(value)")]),t._v("：清除 WeakSet 实例的指定成员。")]),t._v(" "),a("li",[a("code",[t._v("WeakSet.prototype.has(value)")]),t._v("：返回一个布尔值，表示某个值是否在 WeakSet 实例之中。")])]),t._v(" "),a("h3",{attrs:{id:"map"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[t._v("#")]),t._v(" Map")]),t._v(" "),a("p",[t._v("JS 中的对象 Object 也是键值对结构。但是 Object 的键只能是字符串。ES6 中新添加到 Map 数据结构也是键值对结构，但是它的键不再仅限于字符串，可以是各种类型。")]),t._v(" "),a("p",[t._v("也就是说，Object 提供了“字符串-值”这种对应方式，Map 提供了“值-值”这种对应方式。")]),t._v(" "),a("h4",{attrs:{id:"map-基本用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map-基本用法"}},[t._v("#")]),t._v(" Map 基本用法")]),t._v(" "),a("ul",[a("li",[t._v("Map 是一个构造函数，接受一个数组或类数组结构作为参数。")]),t._v(" "),a("li",[t._v("参数数组中的每一个成员都应该是双元素成员，代表"),a("code",[t._v("key-value")]),t._v("。少于两个元素，缺失的元素会变成"),a("code",[t._v("undefined")]),t._v(";多于两个元素，多出来的会被省略。")]),t._v(" "),a("li",[t._v("如果对同一个键多次赋值，后面的值将覆盖前面的值。")]),t._v(" "),a("li",[t._v("如果读取一个未知的键，则返回"),a("code",[t._v("undefined")]),t._v("。")]),t._v(" "),a("li",[t._v("如果键是原始数据类型，那么使用"),a("code",[t._v("===")]),t._v("来对键是否相等进行判断。")]),t._v(" "),a("li",[t._v("和 Set 类似，Map 中也只能有一个 NaN 键。")]),t._v(" "),a("li",[t._v("如果键是对象，那么只有对同一个对象的引用，Map 结构才将其视为同一个键，哪怕这两个对象结构完全一样。Map 的键实际上是跟内存地址绑定的，只要内存地址不一样，就视为两个键。")])]),t._v(" "),a("h4",{attrs:{id:"map-实例的属性和方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map-实例的属性和方法"}},[t._v("#")]),t._v(" Map 实例的属性和方法")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Map.prototype.constructor")]),t._v("：构造函数，默认就是 Map 函数。")]),t._v(" "),a("li",[a("code",[t._v("Map.prototype.size")]),t._v("：返回 Map 实例的成员总数。")])]),t._v(" "),a("p",[t._v("Map 实例有以下方法：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Map.prototype.set(key, value)")]),t._v("：添加某个值，返回整个 Map 结构。如果 key 已经有值，则键值会被更新，否则就新生成该键。")]),t._v(" "),a("li",[a("code",[t._v("Map.prototype.get(key)")]),t._v("：get 方法读取 key 对应的键值，如果找不到 key，返回 undefined。")]),t._v(" "),a("li",[a("code",[t._v("Map.prototype.has(key)")]),t._v("：返回一个布尔值，表示该值是否为 Map 的成员。")]),t._v(" "),a("li",[a("code",[t._v("Map.prototype.delete(key)")]),t._v("：删除某个值，返回一个布尔值，表示删除是否成功。")]),t._v(" "),a("li",[a("code",[t._v("Map.prototype.clear()")]),t._v("：清除所有成员，没有返回值。")])]),t._v(" "),a("h4",{attrs:{id:"map-的遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map-的遍历"}},[t._v("#")]),t._v(" Map 的遍历")]),t._v(" "),a("p",[t._v("Map 的"),a("strong",[t._v("遍历顺序就是插入顺序")]),t._v("。Map 实例有四个遍历方法：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Map.prototype.keys()")]),t._v("：返回键名的遍历器")]),t._v(" "),a("li",[a("code",[t._v("Map.prototype.values()")]),t._v("：返回键值的遍历器")]),t._v(" "),a("li",[a("code",[t._v("Map.prototype.entries()")]),t._v("：返回键值对的遍历器")]),t._v(" "),a("li",[a("code",[t._v("Map.prototype.forEach()")]),t._v("：使用回调函数遍历每个成员")])]),t._v(" "),a("p",[t._v("Map 结构默认实现了 Iterator 接口，因此更好的方法是使用"),a("code",[t._v("for ... of")]),t._v("循环进行遍历。")]),t._v(" "),a("h3",{attrs:{id:"weakmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#weakmap"}},[t._v("#")]),t._v(" WeakMap")]),t._v(" "),a("h4",{attrs:{id:"weakmap-概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#weakmap-概念"}},[t._v("#")]),t._v(" WeakMap 概念")]),t._v(" "),a("p",[t._v("WeakMap 结构与 Map 结构类似，也是用于生成键值对的集合。区别在于：")]),t._v(" "),a("ul",[a("li",[t._v("WeakMap 只接受对象作为键名（null 除外），不接受其他类型的值作为键名。")]),t._v(" "),a("li",[t._v("WeakMap 的"),a("strong",[t._v("键名")]),t._v("所指向的对象，不计入垃圾回收机制。")])]),t._v(" "),a("h3",{attrs:{id:"weakmap-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#weakmap-方法"}},[t._v("#")]),t._v(" WeakMap 方法")]),t._v(" "),a("p",[t._v("WeakMap 只有四个方法可用："),a("code",[t._v("get()")]),t._v("、"),a("code",[t._v("set()")]),t._v("、"),a("code",[t._v("has()")]),t._v("、"),a("code",[t._v("delete()")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"json"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#json"}},[t._v("#")]),t._v(" JSON")]),t._v(" "),a("p",[t._v("有两个方法：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("JSON.prase()")]),t._v(" 将字符串转换成 JSON 对象。")]),t._v(" "),a("li",[a("code",[t._v("JSON.stringify()")]),t._v(" 将 JSON 对象转换成字符串。")])]),t._v(" "),a("h2",{attrs:{id:"参考出处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考出处"}},[t._v("#")]),t._v(" 参考出处")]),t._v(" "),a("ol",[a("li",[t._v("[阮一峰的 Set 和 Map 数据结构]")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/book/5bdc715fe51d454e755f75ef/section/5bdc715f6fb9a049c15ea4e0",target:"_blank",rel:"noopener noreferrer"}},[t._v("yck 小册"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5dac5d82e51d45249850cd20#heading-38",target:"_blank",rel:"noopener noreferrer"}},[t._v("神三元-原生 JS(上篇)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/5d3f8402f265da039e129574",target:"_blank",rel:"noopener noreferrer"}},[t._v("BigInt"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);